-- Stores different book categories (e.g., Fiction, Non-fiction, Science, etc.)
CREATE TABLE category (
    CategoryID TEXT PRIMARY KEY,  -- Unique identifier for each category
    CategoryName TEXT NOT NULL    -- Descriptive name of the category
);

-- Stores publisher details for books
CREATE TABLE publisher (
    PublisherID TEXT PRIMARY KEY,  -- Unique identifier for each publisher
    Name TEXT NOT NULL,            -- Publisher's name
    Address TEXT,                   -- Publisher's address (optional)
    ContactInfo TEXT                 -- Contact details for the publisher
);

-- Stores details of authors who write books
CREATE TABLE author (
    AuthorID TEXT PRIMARY KEY,  -- Unique identifier for each author
    Name TEXT NOT NULL          -- Full name of the author
);

-- Stores book details and links to their publisher and category
CREATE TABLE book (
    ISBN TEXT PRIMARY KEY,      -- Unique book identifier (International Standard Book Number)
    Title TEXT NOT NULL,        -- Title of the book
    Year INTEGER,               -- Year of publication
    Price DECIMAL(10,2),        -- Price of the book in decimal format
    PublisherID TEXT,           -- Publisher of the book (references Publisher table)
    CategoryID TEXT,            -- Category of the book (references Category table)
    FOREIGN KEY (PublisherID) REFERENCES publisher(PublisherID) ON DELETE SET NULL,
    FOREIGN KEY (CategoryID) REFERENCES category(CategoryID) ON DELETE SET NULL
);

-- Links books to their authors (many-to-many relationship)
CREATE TABLE book_author (
    ISBN TEXT,                  -- Book identifier
    AuthorID TEXT,              -- Author identifier
    PRIMARY KEY (ISBN, AuthorID),  -- Ensures uniqueness of each book-author pair
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE,  -- If a book is deleted, its author associations are also removed
    FOREIGN KEY (AuthorID) REFERENCES author(AuthorID) ON DELETE CASCADE  -- If an author is deleted, their book associations are also removed
);

-- Stores customer information
CREATE TABLE customer (
    CustomerID TEXT PRIMARY KEY,  -- Unique identifier for each customer
    Name TEXT NOT NULL,           -- Customer's full name
    Address TEXT,                 -- Customer's address (optional)
    Email TEXT UNIQUE,            -- Unique email for customer contact
    PhoneNumber TEXT UNIQUE       -- Unique phone number for customer contact
);

-- Stores order details, linking customers to their purchases
CREATE TABLE customer_order (
    OrderID TEXT PRIMARY KEY,      -- Unique identifier for each order
    CustomerID TEXT NOT NULL,      -- Customer who placed the order
    OrderDate DATE NOT NULL DEFAULT CURRENT_DATE,  -- Date the order was placed (defaults to current date)
    OrderTotal DECIMAL(10,2),      -- Total cost of the order
    FOREIGN KEY (CustomerID) REFERENCES customer(CustomerID) ON DELETE CASCADE  -- If a customer is deleted, their orders are also removed
);

-- Stores the specific books included in each order
CREATE TABLE orderItem (
    OrderItemID TEXT PRIMARY KEY,  -- Unique identifier for each order item
    OrderID TEXT NOT NULL,         -- Order that this item belongs to
    ISBN TEXT NOT NULL,            -- Book being purchased
    Quantity INTEGER NOT NULL CHECK (Quantity > 0),  -- Number of copies ordered (must be greater than 0)
    Price DECIMAL(10,2) NOT NULL,  -- Price per unit of the book at the time of purchase
    FOREIGN KEY (OrderID) REFERENCES customer_order(OrderID) ON DELETE CASCADE,  -- If an order is deleted, its items are removed
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE  -- If a book is deleted, remove its order references
);

-- Stores inventory levels for each book
CREATE TABLE inventory (
    ISBN TEXT PRIMARY KEY,  -- Book identifier (linked to Book table)
    StockQuantity INTEGER NOT NULL CHECK (StockQuantity >= 0),  -- Number of copies in stock (must be 0 or more)
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE  -- If a book is deleted, remove it from inventory
);

-- Tracks the popularity of books based on demand
CREATE TABLE bookDemand (
    ID TEXT PRIMARY KEY,  -- Unique identifier for demand tracking
    ISBN TEXT NOT NULL,   -- Book being tracked
    Popularity INTEGER NOT NULL CHECK (Popularity >= 0),  -- Popularity score (e.g., based on sales or interest)
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE  -- If a book is deleted, remove its demand data
);

-- Stores profit and cost tracking for each book
CREATE TABLE profitMargin (
    ID TEXT PRIMARY KEY,  -- Unique identifier for profit tracking
    ISBN TEXT NOT NULL,   -- Book being tracked
    SalesTotal DECIMAL(10,2) DEFAULT 0,  -- Total sales revenue generated by the book
    CostTotal DECIMAL(10,2) DEFAULT 0,   -- Total cost incurred for the book
    FOREIGN KEY (ISBN) REFERENCES book(ISBN) ON DELETE CASCADE  -- If a book is deleted, remove its profit tracking data
);